name: Build Windows GROMACS

on:
  push:
    branches:
      - master

env:
  gmxversion: "2025.0-beta"
  cudaversion: "12.5.1"
  gmxcompileto: C:/Temp/gromacs_244
  fftwversion: "3.3.10"
  fftwcompileto: C:/Temp/fftw3

jobs:
  Windows:
    runs-on: windows-2022

    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download Gromacs and FFTW
        shell: bash
        env:
          gmxdownloadlink: https://ftp.gromacs.org/gromacs/gromacs-${{env.gmxversion}}.tar.gz
          fftwlink: https://fftw.org/fftw-${{env.fftwversion}}.tar.gz
          
        run: |
          curl -Lfo gromacs_src.tar.gz ${{ env.gmxdownloadlink }}
          tar xf gromacs_src.tar.gz
          sed -i 's/${CMAKE_CXX17_STANDARD_COMPILE_OPTION}/-std c++17/g' "gromacs-${{ env.gmxversion }}/cmake/gmxManageNvccConfig.cmake"
          # remove 35 and 37 for cuda 12
          ver=${{ env.gmxversion }}
          if [[ ${ver%%.*} -lt 2024 ]];then
            sed -i '/compute_35\|compute_37/d' "gromacs-${{ env.gmxversion }}/cmake/gmxManageNvccConfig.cmake"
          fi
          curl -Lfo fftw_src.tar.gz ${{ env.fftwlink }}
          tar xf fftw_src.tar.gz

      # - name: Install CUDA Toolkit
      #   id: cuda-toolkit
      #   uses: Jimver/cuda-toolkit@v0.2.18
      #   with:
      #     cuda: ${{ env.cudaversion}}
      
      # - name: Copy BuildCustomizations
      #   shell: pwsh
      #   run: |
      #     Copy-Item -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\extras\visual_studio_integration\MSBuildExtensions\*" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\BuildCustomizations\" -Force
      #     Copy-Item -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\extras\visual_studio_integration\MSBuildExtensions\*" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v160\BuildCustomizations\" -Force

      # - name: Compile FFTW single precision
      #   shell: pwsh
      #   run: |
      #     Set-Location fftw-${{ env.fftwversion }} 
      #     New-Item -ItemType Directory -Name build
      #     Set-Location build
      #     cmake .. -DCMAKE_INSTALL_PREFIX=${{ env.fftwcompileto }} -DENABLE_AVX=ON -DENABLE_AVX2=ON -DENABLE_SSE2=ON -DENABLE_THREADS=ON -DWITH_COMBINED_THREADS=ON -DENABLE_FLOAT=ON -DBUILD_SHARED_LIBS=ON -G "Visual Studio 17 2022" -T "v142" -A "x64"
      #     cmake --build . --target INSTALL --config Release -- "-maxCpuCount" "-p:CL_MPCount=3"
      #     Set-Location ..\..
      #     Remove-Item -Path fftw-${{ env.fftwversion }} -Force -Recurse

      - name: Configure build for amd64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          # must use v142 to avoid compile errors for ninja about calc_verletbuf.cpp code
          toolset: 14.29

      - name: Compile GROMACS CUDA
        shell: bash
        run: |
          cd gromacs-${{ env.gmxversion }} && mkdir build && cd build
          choco install ninja
          ver=${{ env.gmxversion }}
          if [[ ${ver%%.*} -ge 2025 ]];then
            # turn off clovars for 2025 because some size_t loop variables can not be supported by VS openmp 2.0
            # turn off plumed for 2025 because it is not supported by VS 17
            # patch grid.cpp omp path
            cd ../../ && patch -p0 < patch/2025-beta-omp.patch && cd gromacs-${{ env.gmxversion }}/build
            cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${{ env.gmxcompileto }} -DCMAKE_PREFIX_PATH=${{ env.fftwcompileto }} -DGMX_SIMD=AVX2_256 -DGMX_GPU=CUDA -DCMAKE_BUILD_TYPE=Release -DGMX_USE_COLVARS=NONE -DGMX_USE_PLUMED=OFF
          elif [[ ${ver%%.*} -lt 2024 ]];then
            # turn off GMX_USE_SIMD_KERNELS
            cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${{ env.gmxcompileto }} -DCMAKE_PREFIX_PATH=${{ env.fftwcompileto }} -DGMX_SIMD=AVX2_256 -DGMX_GPU=CUDA -DCMAKE_BUILD_TYPE=Release -DGMX_USE_SIMD_KERNELS=OFF
          else
            cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${{ env.gmxcompileto }} -DCMAKE_PREFIX_PATH=${{ env.fftwcompileto }} -DGMX_SIMD=AVX2_256 -DGMX_GPU=CUDA -DCMAKE_BUILD_TYPE=Release
          fi
          sed -i 's/-MD/-MT/g' build.ninja
          ninja install -j4
          cd ../../
          rm -rf gromacs-${{ env.gmxversion }}

      - name: Copy DLLs and Test
        shell: pwsh
        run: |
          Copy-Item -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin\cufft64_*.dll" -Destination "${{ env.gmxcompileto }}\bin\" -Force
          Copy-Item -Path "${{ env.fftwcompileto }}\bin\*.dll" -Destination "${{ env.gmxcompileto }}\bin\" -Force
          Set-Location ${{ env.gmxcompileto }}
          Set-Location ${{ env.gmxcompileto }}\bin
          .\gmx.exe -version

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: gmx_bins
          path: ${{ env.gmxcompileto }}


  # refer to https://github.com/endless-sky/endless-sky/blob/master/.github/workflows/cd.yaml
  Release:
    needs: [Windows]
    runs-on: ubuntu-20.04

    env:
        RELEASE_COMMAND: release
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: bleed

    steps:
      - uses: actions/checkout@v3

      - name: Install github-release
        run: |
          go install github.com/github-release/github-release@latest
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Set environment variables
        run: |
          echo "RELEASE_TAG=bleed" >> $GITHUB_ENV
          echo "TIME=$(date -u '+%Y.%m.%d')" >> $GITHUB_ENV
          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

      # - name: Move/Create continuous tag
      #   run: |
      #     git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
      #     git push --tags --force
      
      - name: Check continuous release status
        run: |
          if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
            echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
          else
            echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
          fi
      
      - name: Setup continuous release
        run: |
          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})
          This is an automated build of the latest source. It may be unstable or even crash, corrupt your save or eat your kitten. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          github-release ${{env.RELEASE_COMMAND}} --tag ${{ env.RELEASE_TAG }} --name "Bleed Release" --description "$DESCRIPTION" --pre-release
      

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: gmx_bins

      - name: Package Windows artifact to release
        env:
          OUTPUT_TAR: GROMACS-${{ env.gmxversion }}_GPU.tar.gz
        run: |
          ls -alt
          tar -czvf ${{env.OUTPUT_TAR}} share include bin
          github-release upload --tag ${{ env.RELEASE_TAG }} --replace --name ${{env.OUTPUT_TAR}} --file ${{env.OUTPUT_TAR}}
