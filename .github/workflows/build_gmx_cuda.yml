name: Build Windows GROMACS

on:
  push:
    branches:
      - master

env:
  gmxversion: "2024.4"
  gmxcompileto: C:/FOSS/gromacs_244
  fftwversion: "3.3.10"
  fftwcompileto: C:/FOSS/fftw3

jobs:
  Windows:
    runs-on: windows-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Install CUDA Toolkit
        id: cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.18
        with:
          cuda: "12.4.1"
      
      - name: Copy BuildCustomizations
        shell: pwsh
        run: |
          Copy-Item -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\extras\visual_studio_integration\MSBuildExtensions\*" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\BuildCustomizations\" -Force
          Copy-Item -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\extras\visual_studio_integration\MSBuildExtensions\*" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v160\BuildCustomizations\" -Force

      - name: Download Gromacs and FFTW
        shell: bash
        env:
          gmxdownloadlink: https://ftp.gromacs.org/gromacs/gromacs-2024.4.tar.gz
          gmxmd5hash: "1ce06e1e330c7232e691c3cd7581aa75"
          fftwlink: https://fftw.org/fftw-3.3.10.tar.gz
          fftwmd5hash: "8ccbf6a5ea78a16dbc3e1306e234cc5c"
        run: |
          curl -Lfo gromacs_src.tar.gz ${{ env.gmxdownloadlink }}
          echo "${{ env.gmxmd5hash }}  gromacs_src.tar.gz" | md5sum -c
          tar xf gromacs_src.tar.gz
          sed -i 's/${CMAKE_CXX17_STANDARD_COMPILE_OPTION}/-std c++17/g' "gromacs-${{ env.gmxversion }}/cmake/gmxManageNvccConfig.cmake"
          curl -Lfo fftw_src.tar.gz ${{ env.fftwlink }}
          echo "${{ env.fftwmd5hash }}  fftw_src.tar.gz" | md5sum -c
          tar xf fftw_src.tar.gz

      - name: Compile FFTW single precision
        shell: pwsh
        run: |
          Set-Location fftw-${{ env.fftwversion }} 
          New-Item -ItemType Directory -Name build
          Set-Location build
          cmake .. "-DCMAKE_INSTALL_PREFIX=${{ env.fftwcompileto }}" "-DENABLE_AVX=ON" "-DENABLE_AVX2=ON" "-DENABLE_SSE2=ON" "-DENABLE_THREADS=ON" "-DWITH_COMBINED_THREADS=ON" "-DENABLE_FLOAT=ON" "-DBUILD_SHARED_LIBS=ON" -G "Visual Studio 17 2022" -T "v142" -A "x64"
          cmake --build . --target INSTALL --config Release -- "-maxCpuCount" "-p:CL_MPCount=3"
          Set-Location ..\..
          Remove-Item -Path fftw-${{ env.fftwversion }} -Force -Recurse

      - name: Configure build for amd64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Compile GROMACS CUDA
        shell: pwsh
        run: |
          Set-Location gromacs-${{ env.gmxversion }}
          New-Item -ItemType Directory -Name build
          Set-Location build
          choco install ninja
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${{ env.gmxcompileto }} -DCMAKE_PREFIX_PATH=${{ env.fftwcompileto }} -DGMX_USE_SIMD_KERNELS=OFF -DGMX_SIMD=AVX2_256 -DGMX_GPU=CUDA -DCMAKE_BUILD_TYPE=Release
          sed -i 's/-MD/-MT/g' build.ninja
          ninja install -j4
          Set-Location ..\..
          Remove-Item -Path gromacs-${{ env.gmxversion }} -Force -Recurse

      - name: Checksum
        shell: bash
        run: |
          cd `cygpath "${{ env.gmxcompileto }}"/bin`
          sha256sum gmx.exe | tee gmx.exe.sha256

      - name: Copy DLLs and Test
        shell: pwsh
        run: |
          Copy-Item -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin\cufft64_*.dll" -Destination "${{ env.gmxcompileto }}\bin\" -Force
          Copy-Item -Path "${{ env.fftwcompileto }}\bin\*.dll" -Destination "${{ env.gmxcompileto }}\bin\" -Force
          Set-Location ${{ env.gmxcompileto }}\bin
          .\gmx.exe -version

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: GROMACS-${{ env.gmxversion }}_GPU
          path: ${{ env.gmxcompileto }}


  # refer to https://github.com/endless-sky/endless-sky/blob/master/.github/workflows/cd.yaml
  Release:
    needs: [Windows]
    runs-on: ubuntu-20.04

    env:
        RELEASE_COMMAND: release
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: bleed

    steps:
      - uses: actions/checkout@v3

      - name: Install github-release
        run: |
          go install github.com/github-release/github-release@latest
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Set environment variables
        run: |
          echo "RELEASE_TAG=bleed" >> $GITHUB_ENV
          echo "TIME=$(date -u '+%Y.%m.%d')" >> $GITHUB_ENV
          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

      - name: Move/Create continuous tag
        run: |
          git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
          git push --tags --force
      
      - name: Check continuous release status
        run: |
          if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
            echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
          else
            echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
          fi
      
      - name: Setup continuous release
        run: |
          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})
          This is an automated build of the latest source. It may be unstable or even crash, corrupt your save or eat your kitten. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          github-release ${{env.RELEASE_COMMAND}} --tag ${{ env.RELEASE_TAG }} --name "Bleed Release" --description "$DESCRIPTION" --pre-release
      

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: GROMACS-${{ env.gmxversion }}_GPU 

      - name: Package Linux and Windows artifact to release
        env:
          OUTPUT_TAR: GROMACS-${{ env.gmxversion }}_GPU.tar.gz
        run: |
          tar -czvf ${{env.OUTPUT_TAR}} GROMACS-${{ env.gmxversion }}_GPU
          github-release upload --tag ${{ env.RELEASE_TAG }} --replace --name ${{env.OUTPUT_TAR}} --file ${{env.OUTPUT_TAR}}