name: Build Windows GROMACS with ROCM

on:
  push:
    branches:
      - master

env:
  gmxversion: "2024.4"
  gmxcompileto: C:/Temp/gmxfiles
  fftwversion: "3.3.9"
  fftwcompileto: C:/fftw3
  adcppto: C:/Temp/adcpp
  ROCM_PATH: C:\AMD\ROCm\5.7

jobs:
  Windows:
    runs-on: windows-2022

    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/boost-1.85.0
          key: ${{runner.os}}-boost1850

      - name: Cache FFTW3
        id: cache-fftw
        uses: actions/cache@v4
        with:
          path: ${{env.fftwcompileto}}
          key: ${{runner.os}}-fftw3.3.9

      - name: Cache LLVM 17
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/llvm
          key: ${{runner.os}}-llvm-17

      - name: Cache ROCM 5.7
        id: cache-rocm
        uses: actions/cache@v4
        with:
          path: ${{env.ROCM_PATH}}
          key: ${{runner.os}}-rocm-5.7
            
      - name: Download ninja & wget & sed tools
        run: |
          choco install ninja wget sed
      - name: Remove runner self LLVM
        run: |
          Remove-Item -Path "C:\Program Files\LLVM" -Force -Recurse
      - name: Install LLVM and Clang 17
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17.0.1"
          arch: x64
          directory: ${{github.workspace}}/llvm

      - name: Configure build for amd64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          toolset: 14.29

      - name: Build boost with Clang
        if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: powershell
        env:
          LLVM_PATH: "${{env.ROCM_PATH}}"
          LD_LIBRARY_PATH: "${{env.ROCM_PATH}}/lib"
        run: |
          $env:PATH = "$env:GITHUB_WORKSPACE\llvm\bin;$env:PATH"
          $env:PATH = "${{env.ROCM_PATH}}\bin;$env:PATH"
          $boostURL = "https://github.com/boostorg/boost/releases/download/boost-1.85.0/boost-1.85.0-b2-nodocs.7z"
          $boostFolderName = $boostUrl.Split("/")[-2]
          Invoke-WebRequest $boostURL -OutFile boost.7z
          7z.exe x boost.7z
          cd $boostFolderName
          .\bootstrap.bat msvc
          .\b2.exe cxxstd=14 link=static runtime-link=shared runtime-link=static runtime-debugging=on --with-context --with-fiber --with-atomic --with-filesystem --with-test toolset=clang-win address-model=64 --build-type=complete stage threading=multi debug release
          .\b2.exe cxxstd=14 link=static runtime-link=shared runtime-link=static --with-context --with-fiber --with-atomic --with-filesystem --with-test toolset=clang-win address-model=64 --build-type=complete stage threading=multi debug release

      - name: Install ROCM HIP SDK
        if: steps.cache-rocm.outputs.cache-hit != 'true'
        run: |
          Get-ComputerInfo | Format-Table CsSystemType,OSName,OSDisplayVersion
          curl -Lfo setup.exe https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-23.Q4-WinSvr2022-For-HIP.exe
          Start-Process setup.exe -ArgumentList '-install' -NoNewWindow -Wait
          mkdir "${{env.ROCM_PATH}}"
          Move-Item -Path "C:\Program Files\AMD\ROCm\5.7\*" -Destination "${{env.ROCM_PATH}}" -Force
      
      - name: Build AdaptiveCpp
        shell: pwsh
        run: |
           dir "${{env.ROCM_PATH}}\bin"
           $env:PATH = "$env:GITHUB_WORKSPACE\llvm\bin;$env:PATH"
           #$env:PATH = "${{env.ROCM_PATH}}\bin;$env:PATH"
          
           wget https://github.com/AdaptiveCpp/AdaptiveCpp/archive/refs/tags/v24.06.0.tar.gz
           tar -xf v24.06.0.tar.gz 
           Set-Location AdaptiveCpp-24.06.0
           md build
           cd build
           cmake .. -G Ninja -DCMAKE_PREFIX_PATH="$env:GITHUB_WORKSPACE\llvm" -DCMAKE_C_COMPILER=clang  -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=${{ env.adcppto }} -DBOOST_ROOT="$env:GITHUB_WORKSPACE/boost-1.85.0" -DBoost_COMPILER=-clangw17 -DBoost_ARCHITECTURE=-x64 -DCMAKE_BUILD_TYPE=Release 
           ninja install -j4
           Copy-Item -Path "${{ env.adcppto }}\bin\*acpp-rt.dll" -Destination "${{ env.adcppto }}\bin\acpp-clang.dll"

           dir "${{ env.adcppto }}\bin"
           dir "${{ env.adcppto }}\lib"
           Set-Location ../..

      - name: Upload Acpp dll artifact
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: adcpp_win64
          path: ${{ env.adcppto }}


      # - name: Download Gromacs and FFTW
      #   shell: bash
      #   env:
      #     gmxdownloadlink: https://ftp.gromacs.org/gromacs/gromacs-${{env.gmxversion}}.tar.gz
      #     fftwlink: https://fftw.org/fftw-${{env.fftwversion}}.tar.gz
      #   run: |
      #     curl -Lfo gromacs_src.tar.gz ${{ env.gmxdownloadlink }}
      #     tar xf gromacs_src.tar.gz
      #     curl -Lfo fftw_src.tar.gz ${{ env.fftwlink }}
      #     tar xf fftw_src.tar.gz
      # - name: Compile FFTW single precision
      #   if: steps.cache-fftw.outputs.cache-hit != 'true'
      #   shell: pwsh
      #   run: |
      #     Set-Location fftw-${{ env.fftwversion }} 
      #     New-Item -ItemType Directory -Name build
      #     Set-Location build
      #     cmake .. -DCMAKE_INSTALL_PREFIX=${{ env.fftwcompileto }} -DENABLE_AVX=ON -DENABLE_AVX2=ON -DENABLE_SSE2=ON -DENABLE_THREADS=ON -DWITH_COMBINED_THREADS=ON -DENABLE_FLOAT=ON -DBUILD_SHARED_LIBS=ON -G "Visual Studio 17 2022" -T "v142" -A "x64"
      #     cmake --build . --target INSTALL --config Release -- "-maxCpuCount" "-p:CL_MPCount=3"
      #     Set-Location ..\..
      #     Remove-Item -Path fftw-${{ env.fftwversion }} -Force -Recurse

      # - name: Build ROCM GROMACS
      #   shell: pwsh
      #   if: ${{ success() }}
      #   run: |
      #     dumpbin /dependents "${{ env.adcppto }}\bin\acpp-clang.dll"
      #     $env:PATH = "${{ env.adcppto }}\bin;$env:PATH"
      #     $env:PATH = "$env:GITHUB_WORKSPACE\llvm\bin;$env:PATH"
      #     Set-Location gromacs-${{ env.gmxversion }}
      #     mkdir build 
      #     Set-Location build
      #     dir "$env:GITHUB_WORKSPACE/boost-1.85.0/stage/lib"
      #     # support AMD RX 7600XT to 7900XTX
      #     cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${{ env.gmxcompileto }} -DCMAKE_PREFIX_PATH="${{env.adcppto}};${{ env.fftwcompileto }}" -DCMAKE_EXE_LINKER_FLAGS="-Xlinker $env:GITHUB_WORKSPACE/boost-1.85.0/stage/lib/libboost_fiber-clangw17-mt-x64-1_85.lib $env:GITHUB_WORKSPACE/boost-1.85.0/stage/lib/libboost_context-clangw17-mt-x64-1_85.lib ${{env.ROCM_PATH}}/lib/amdhip64.lib ${{env.ROCM_PATH}}/lib/hiprtc.lib" -DAdaptiveCpp_DIR="${{env.adcppto}}\lib\cmake\AdaptiveCpp" -DGMX_SIMD=AVX2_256 -DGMX_GPU=SYCL -DGMX_SYCL=ACPP -DSYCL_CXX_FLAGS_EXTRA="--acpp-clang-include-path=${{env.ROCM_PATH}}\lib\clang\17\include --acpp-clang=${{env.ROCM_PATH}}\bin\clang++.exe -DNOMINMAX" -DACPP_TARGETS="hip:gfx1100,gfx1101,gfx1102" -DCMAKE_C_COMPILER="${{env.ROCM_PATH}}\bin\clang.exe" -DCMAKE_CXX_COMPILER="${{env.ROCM_PATH}}\bin\clang++.exe" -DCMAKE_BUILD_TYPE=Release 
      #     sed -i 's/-MD/-MT/g' build.ninja
      #     ninja install -j4; if (-not $?) { ninja install -j1 }
      #     Set-Location ../..
      #     Remove-Item -Path gromacs-${{ env.gmxversion }} -Recurse -Force

      # - name: Copy DLLs and Test
      #   shell: pwsh
      #   run: |
      #     dumpbin /dependents "${{ env.gmxcompileto }}\bin\gmx.exe"
      #     Copy-Item -Path "${{ env.ROCM_PATH }}\bin\hip*.dll"  -Destination "${{ env.gmxcompileto }}\bin\" -Force
      #     Copy-Item -Path "${{ env.ROCM_PATH }}\bin\amd*.dll"  -Destination "${{ env.gmxcompileto }}\bin\" -Force
      #     Copy-Item -Path "${{ env.fftwcompileto }}\bin\*.dll" -Destination "${{ env.gmxcompileto }}\bin\" -Force
      #     # don't run gmx.exe because no AMD GPU
      #     #.\gmx.exe -version
          
      # - name: Upload Windows artifact
      #   uses: actions/upload-artifact@v4
      #   if: ${{ success() }}
      #   with:
      #     name: gmx_rocm_bins
      #     path: ${{ env.gmxcompileto }}
